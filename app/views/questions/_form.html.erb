<%= render 'error', question: @question%>

<!-- TurbolinksをOFFにする -->
<% content_for(:body_attributes) do %>
  data-turbolinks="false"
<% end %>
<!--TODO: 投稿が失敗したときにエラーを表示させる-->

<div class="modal" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <p class="mb-0" style="color : #a45705">・以下の検索フォームで場所を検索し地図にマーカーをおきましょう</p>
        <div class="map-search_form d-flex align-items-center">
          <input id="address" type="textbox" placeholder="場所を入力" class="my-2 map-search-textbox">
          <input type="button" class= "map-search-button py-1 px-3 ml-2" value="探す" onclick="codeAddress()">
        </div>

        <!-- <div id="display">何かが表示される、、、、！</div> -->
        <div id='map'></div>

        <style>
          #map {
            height: 500px;
            width: 465px;
          }
        </style>
      </div>
      <div class="modal-footer d-flex justify-content-between">
        <div class="modal-footer-left">
          <button type="button" class="map-close-button" data-dismiss="modal" >閉じる</button>
        </div>
        <div class="modal-footer-right d-flex">
          <button type="button" class="map-cancel-button d-flex mr-2" data-dismiss="modal" onClick="cancelMap()">キャンセル</button>
          <button type="button" class="push-button" data-dismiss="modal" onClick="setId()" >この場所にする</button>
        </div>
      </div>
    </div>
  </div>
</div>
<%= form_with(model: question, remote: true,html: {novalidate: true },class: "needs-validation") do |form| %>
  <div class="row">
    <div class="col-12">
      <div class="form-country-area mt-2">
        <h6>エリア</h6>
        <div class="d-flex mb-3 ">
          <!-- onchangeはとりあえず入れておく実際機能しているJavascriptは下部にあり-->
          <%= form.collection_select(:continent, Continent.all, :id, :name ,{prompt: "方面を選択してください"},{:onchange => "select_country($(this).val())",class: "form-control col-sm-6" ,required: true})%>
          <select class="form-control col-sm-6" name="question[country_id]" id="question_country_id" required ><option value="" style="display: none;" >国・地域を選択してください</option></select>
        </div>
        <div class="invalid-feedback">
          方面・国を選択してください
        </div>
      </div>
      <%# <%=form.collection_select(:country_id, @countries, :id, :name ,prompt: "選択してください" ) %>
      <%# <%=form.collection_select(:country_id, @countries, :id, :name ,{include_blank: true, :disabled => true})%> 
      <%# <%= render 'select_country', form: form%>

      <!-- 質問投稿のフィールドを用意する-->
      <div class="field mb-3", id="title">
        <h6>タイトル(40字以内)</h6>
        <h6 style="color : #a45705">※内容が分かるよう、具体的なタイトルをつけましょう</h6>
        <%= form.text_field :title ,class: "form-control" ,maxlength: "40" ,required: true %>
        <div class="invalid-feedback">
          タイトルを入力してください
        </div>
      </div>
      
      
      
      <!--ここを追加-->
      <h6>質問の種類</h6><h6 style="color : #a45705">※内容に当てはまるものを1つだけ選んでください。</h6>
      <div class="form-group mt-3 ">
        <div class="field" id="checkbox">
          <div class="card">
            <div class="question-tag-container d-flex ml-3 mt-2">
              <% @tags.each do |t| %>
                <!-- align-items-baselineでラジオボタンとタグの名前の位置を並べる -->
                <div class="question-tag d-flex align-items-baseline mb-2 custom-control custom-radio">
                  <%= radio_button "question", "tag_id" ,t.id,class: "mr-1 custom-control-input" ,required: true %>
                  <%# <%= form.radio_button "tag_id" , t.id %>  
                  <%# <%= check_box_tag "question[tag_ids][]", t.id, @question.tags.include?(t) %> 
                  <%= form.label :tag_id,t.name ,{value: t.id,class: "mb-0 custom-control-label"}%>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      </div>
      
    
    
      <div class="field" id="body">
        <h6>質問内容</h6><h6 style="color : #a45705">※回答者が回答しやすいよう、できるだけ具体的に書いてください。</h6>
          <%= form.text_area :body ,  class: 'form-control', rows: 10,required: true %>
          <div class="invalid-feedback">
            質問内容を入力してください
          </div>
      </div>
      
      <div class="question-post-footer d-flex justify-content-between ">
        <div class="actions mb-0 align-self-center" id="submit">
          <%= form.submit "投稿", class: "btn btn-primary"%>
        </div>
        <div class="d-flex align-items-center tool-area">
          <span id ="push-image"></span>
          <span class="respond-button p-2 ">
            <%= form.file_field :image, class: "image", accept: "image/jpeg,image/png",style: "display: none" %>
            <%= form.label :image, class: "image mb-0 mt-1 " do%>
              <i class="far fa-image mx-3"></i>
            <% end %>
            <%= form.hidden_field :image_cache , class: "image", accept: "image/jpeg,image/png"%>
          </span>

          <span class="respond-button p-2 button-relative">
            <div type="button" data-toggle="modal" data-target="#exampleModal">
              <div class="d-flex "><i class="fas fa-map-marker-alt respond-button mx-3 "></i></div><div id="map-button" class="q-setCheck"></div>
            </div>
          </span>
          <%= form.hidden_field :latitude, id: "question_latitude" %>
          <%= form.hidden_field :longitude, id: "question_longitude" %>
        </div>
      </div>
      
    </div>
  </div>
<% end %>

<script>
$(function() {
  $('#question_continent').change(function() {
    continent_id = $(this).val();
    if (continent_id == ""){
      document.getElementById('question_country_id').innerHTML = '<option>国・地域を選択してください</option>';
      return;
    }
    $.ajax({
      type: 'GET',
      url: '/questions/get_body',
      data: {
        continent_id: continent_id
      }
    })
  });
});

(function() {
  'use strict';
  window.addEventListener('load', function() {
    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    var forms = document.getElementsByClassName('needs-validation');
    // Loop over them and prevent submission
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();

$(document).on('change', '.image',function(){
  if ($('.image').prop("files")[0] == null){
    $('#push-image').text("")
  }else{
    $('#push-image').append($('.image').prop("files")[0].name);
  }
});

// showページと変数名がかぶるとエラーになるためnewをつけオリジナルの変数にした
let new_map
let new_geocoder
let new_marker
let new_latitude
let new_longitude

function setId(){
  document.getElementById("question_latitude").value = new_latitude
  document.getElementById("question_longitude").value = new_longitude
  
  $("#map-button").removeClass("q-setCheck")
  $("#map-button").addClass("q-setChecked")
}
function cancelMap(){
  document.getElementById("question_latitude").value = null
  document.getElementById("question_longitude").value = null
  $("#map-button").removeClass("q-setChecked")
  $("#map-button").addClass("q-setCheck")
}

function codeAddress() {
  let inputAddress = document.getElementById('address').value;

  new_geocoder.geocode({
    'address': inputAddress
  }, function(results, status) {
    if (status == 'OK') {
      new_map.setCenter(results[0].geometry.location);
      new_marker = new google.maps.Marker({
        map: new_map,
        position: results[0].geometry.location
      });
      // 下の1行を追加 
      // display.textContent = "検索結果：" + results[0].geometry.location
    } else {
      alert('該当する結果がありませんでした：' + status);
    }
  });
}

function questionInitMap() {
  new_geocoder = new google.maps.Geocoder()
  // const display = document.getElementById('display')

  new_map = new google.maps.Map(document.getElementById('map'), {
    center: {
      lat: 40.7828,
      lng: -73.9653
    },
    zoom: 12,
    disableDoubleClickZoom: true
  });

  new_marker = new google.maps.Marker({
    position: {
      lat: 40.7828,
      lng: -73.9653
    },
    map: new_map
  });
  new_latitude = 40.7828
  new_longitude = -73.9653
  
  google.maps.event.addListener(new_map,"click",clickMap);
  // google.maps.event.addListener(map,"dblclick",clickMap);

  function clickMap(e){
    new_marker.setMap(null);
    new_marker = null;
    new_marker = new google.maps.Marker({
      position:{
          lat: e.latLng.lat(),
          lng: e.latLng.lng()
      },
      map: new_map
    });
    new_latitude = e.latLng.lat();
    new_longitude = e.latLng.lng();

  }
}

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCB9VF2bwI1ewTkQaltzMffsfot47xa7AA&callback=questionInitMap" async defer></script>